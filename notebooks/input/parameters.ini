# *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*
# *  CLASS input parameter file  *
# *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*

[background parameters]

# 1) Hubble parameter:

h =0.674

# 2) photon density:
T_cmb = 2.7255

# 3) baryon density:
omega_b = 0.0224

# 4a) ultra-relativistic species / massless neutrino density:
N_ur = 3.046

# 5) density of cdm (cold dark matter):
omega_cdm = 0.12

# 7) curvature:
Omega_k = 0.

# 9) scale factor today 'a_today'

# a_today = 1.


# --------------------------------
# ----> thermodynamics parameters:
# --------------------------------

# 1) primordial Helium fraction 'BBN' will calculate
YHe = 0.25

# 2) 'recombination' algorithm set to 'RECFAST' or 'HyRec'

recombination = RECFAST

# 2) parametrization of reionization: 'reio_parametrization' must be one
#    of 'reio_none' (no reionization), 'reio_camb' (like CAMB: one
#    tanh() step for hydrogen reionization one for second helium
#    reionization), 'reio_bins_tanh' (binned history x_e(z) with tanh()
#    interpolation between input values), 'reio_half_tanh' (like
#    'reio_camb' excepted that we match the function xe(z) from
#    recombination with only half a tanh(z-z_reio)), 'reio_many_tanh'
#    (arbitrary number of tanh-like steps with specified ending values,
#    a scheme usually more useful than 'reio_bins_tanh'), 'reio_inter'
#    (linear interpolation between discrete values of xe(z))...

reio_parametrization = reio_none


# 6) State whether you want the code to compute the simplest analytic approximation to the photon damping scale (it will be added to the thermodynamics output, and its value at recombination will be stored and displayed in the standard output) (default: 'compute damping scale' set to 'no')

# compute damping scale = yes

# ----------------------------------------------------
# ----> define which perturbations should be computed:
# ----------------------------------------------------

# 1.a) list of output spectra requested:
output = tCl,pCl,lCl

# 1.b) if you included 'tCl' in the list, you can take into account only some of
#      the terms contributing to the temperature spectrum: intrinsic temperature
#      corrected by Sachs-Wolfe ('tsw' or 'TSW'), early integrated Sachs-Wolfe
#      ('eisw' or 'EISW'), late integrated Sachs-Wolfe ('lisw' or 'LISW'),
#      Doppler ('dop' or 'Dop'), polarisation contribution ('pol' or 'Pol'). Put
#      below the list of terms to be included
#      (defaut: if this field is not passed, all terms will be included)

#temperature contributions = tsw, eisw, lisw, dop, pol


# 3) if you want to consider perturbed recombination, enter a word
#    containing the letter 'y' or 'Y'. CLASS will then compute the
#    perturbation in the ionization fraction x_e and the baryon
#    temperature, as in 0707.2727. The initial conformal time will be
#    small, therefore you should use the default integrator ndf15
#    (i.e. do not set 'evolver' to 0, otherwise the code will be
#    slower).  (default: neglect perturbed recombination)

#perturbed recombination = yes

# 4) list of modes ('s' for scalars, 'v' for vectors, 't' for tensors). More than one letter allowed.

modes = s

# 5) relevant only if you ask for 'tCl, lCl' and/or 'pCl, lCl': if you want the spectrum of lensed Cls

lensing = no


# 8) gauge in which calculations are performed: 'sync' or 'new'

gauge = synchronous

# ---------------------------------------------
# ----> define primordial perturbation spectra:
# ---------------------------------------------

# 2.a.2) scalar adiabatic perturbations: curvature power spectrum value at pivot scale ('A_s' or 'ln10^{10}A_s') OR 'sigma8' (found by iterations using a shooting method), tilt at the same scale 'n_s', and tilt running 'alpha_s' (default: set 'A_s' to 2.215e-9, 'n_s' to 0.9619, 'alpha_s' to 0)

A_s = 2.1e-9

n_s = 0.97


# -------------------------------------
# ----> define format of final spectra:
# -------------------------------------

# 1) maximum l for CLs:
# - 'l_max_scalars' for CMB scalars (temperature, polarization, cmb lensing potential),
# - 'l_max_tensors' for CMB tensors (temperature, polarization)

l_max_scalars = 2000


# 7a) file name root 'root' for all output files (if Cl requested, written to
#     '<root>cl.dat'; if P(k) requested, written to '<root>pk.dat'; plus similar
#     files for scalars, tensors, pairs of initial conditions, etc.; if file with
#     input parameters requested, written to '<root>parameters.ini') (default:
#     the input module sets automatically 'root' to 'output/<thisfilename>N_',
#     where N is the first available integer number, starting from 00, to avoid
#     erasing the output of previous runs)

root = output/


# 7b) do you want headers at the beginning of each output file (giving precisions
#     on the output units/ format) ? If 'headers' set to something containing the
#     letter 'y' or 'Y', headers written, otherwise not written
#     (default: written)

headers = yes

# 7c) in all output files, do you want columns to be normalized and ordered with
#     the default CLASS definitions or with the CAMB definitions (often idential
#     to the CMBFAST one) ? Set 'format' to either 'class', 'CLASS', 'camb' or
#     'CAMB' (default: 'class')

format = class

# 7d) Do you want to write a table of background quantitites in a file? This will
#     include H, densities, Omegas, various cosmological distances, sound
#     horizon, etc., as a function of conformal time, proper time, scale factor.
#     File created if 'write background'  set to something containing the letter
#     'y' or 'Y', file written, otherwise not written (default: not written)

write background = yes

# 7e) Do you want to write a table of thermodynamics quantitites in a file? File
#     is created if 'write thermodynamics' is set to something containing the
#     letter 'y' or 'Y'. (default: not written)

write thermodynamics = yes

# 7f) Do you want to write a table of perturbations to files for certain
#     wavenumbers k? Dimension of k is 1/Mpc. The actual wave numbers are chosen
#     such that they are as close as possible to the requested k-values.

# k_output_values = #0.01, 0.1, 0.0001

# 7g) Do you want to write the primordial scalar(/tensor) spectrum in a file,
#     with columns k [1/Mpc], P_s(k) [dimensionless], ( P_t(k) [dimensionless])?

write primordial = yes

# 7h) Do you want to have all input/precision parameters which have been read
#     written in file '<root>parameters.ini', and those not written in file
#     '<root>unused_parameters' ? If 'write parameters' set to something
#     containing the letter 'y' or 'Y', file written, otherwise not written
#     (default: not written)

write parameters = yes

# 7i) Do you want a warning written in the standard output when an input
#     parameter or value could not be interpreted ? If 'write warnings'

write warnings = yes

# ----------------------------------------------------
# ----> amount of information sent to standard output:
# ----------------------------------------------------

# Increase integer values to make each module more talkative (default: all set to 0)

input_verbose = 1
background_verbose = 1
thermodynamics_verbose = 1
perturbations_verbose = 1
transfer_verbose = 1
primordial_verbose = 1
# spectra_verbose = 1
# nonlinear_verbose = 1
lensing_verbose = 1
output_verbose = 1
